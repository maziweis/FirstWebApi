//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClassLibrary1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MetaDataEntities : DbContext
    {
        public MetaDataEntities()
            : base("name=MetaDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Meta_CodeTable> Meta_CodeTable { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tb_Code_BookReel> tb_Code_BookReel { get; set; }
        public virtual DbSet<tb_Code_District> tb_Code_District { get; set; }
        public virtual DbSet<tb_Code_Knowledge> tb_Code_Knowledge { get; set; }
        public virtual DbSet<tb_Code_Knowledge_Relationship> tb_Code_Knowledge_Relationship { get; set; }
        public virtual DbSet<tb_Code_ListTable1> tb_Code_ListTable1 { get; set; }
        public virtual DbSet<tb_Code_ListTable1_Relationship> tb_Code_ListTable1_Relationship { get; set; }
        public virtual DbSet<tb_Code_ListTable10> tb_Code_ListTable10 { get; set; }
        public virtual DbSet<tb_Code_ListTable11> tb_Code_ListTable11 { get; set; }
        public virtual DbSet<tb_Code_ListTable12> tb_Code_ListTable12 { get; set; }
        public virtual DbSet<tb_Code_ListTable13> tb_Code_ListTable13 { get; set; }
        public virtual DbSet<tb_Code_ListTable14> tb_Code_ListTable14 { get; set; }
        public virtual DbSet<tb_Code_ListTable15> tb_Code_ListTable15 { get; set; }
        public virtual DbSet<tb_Code_ListTable16> tb_Code_ListTable16 { get; set; }
        public virtual DbSet<tb_Code_ListTable17> tb_Code_ListTable17 { get; set; }
        public virtual DbSet<tb_Code_ListTable18> tb_Code_ListTable18 { get; set; }
        public virtual DbSet<tb_Code_ListTable19> tb_Code_ListTable19 { get; set; }
        public virtual DbSet<tb_Code_ListTable2> tb_Code_ListTable2 { get; set; }
        public virtual DbSet<tb_Code_ListTable2_Relationship> tb_Code_ListTable2_Relationship { get; set; }
        public virtual DbSet<tb_Code_ListTable3> tb_Code_ListTable3 { get; set; }
        public virtual DbSet<tb_Code_ListTable3_Relationship> tb_Code_ListTable3_Relationship { get; set; }
        public virtual DbSet<tb_Code_ListTable6> tb_Code_ListTable6 { get; set; }
        public virtual DbSet<tb_Code_ListTable7> tb_Code_ListTable7 { get; set; }
        public virtual DbSet<tb_Code_ListTable8> tb_Code_ListTable8 { get; set; }
        public virtual DbSet<tb_Code_ListTable9> tb_Code_ListTable9 { get; set; }
        public virtual DbSet<tb_Code_School> tb_Code_School { get; set; }
        public virtual DbSet<tb_Code_SchoolStage> tb_Code_SchoolStage { get; set; }
        public virtual DbSet<tb_Code_Sex> tb_Code_Sex { get; set; }
        public virtual DbSet<tb_Code_TreeTable2> tb_Code_TreeTable2 { get; set; }
        public virtual DbSet<tb_Code_TreeTable3> tb_Code_TreeTable3 { get; set; }
        public virtual DbSet<tb_Code_UserSort> tb_Code_UserSort { get; set; }
        public virtual DbSet<tb_Meta_DataSort> tb_Meta_DataSort { get; set; }
        public virtual DbSet<tb_StandardBook> tb_StandardBook { get; set; }
        public virtual DbSet<tb_StandardCatalog> tb_StandardCatalog { get; set; }
        public virtual DbSet<tb_Template_List> tb_Template_List { get; set; }
        public virtual DbSet<tb_Template_ListRelationship> tb_Template_ListRelationship { get; set; }
        public virtual DbSet<tb_Template_Mesh> tb_Template_Mesh { get; set; }
        public virtual DbSet<tb_Template_MRelationship> tb_Template_MRelationship { get; set; }
        public virtual DbSet<tb_Template_Tree> tb_Template_Tree { get; set; }
        public virtual DbSet<tb_Code_Area> tb_Code_Area { get; set; }
        public virtual DbSet<tb_Code_City> tb_Code_City { get; set; }
        public virtual DbSet<tb_Code_Province> tb_Code_Province { get; set; }
        public virtual DbSet<View_Code_School> View_Code_School { get; set; }
    
        [DbFunction("MetaDataEntities", "Fun_SplitSTR")]
        public virtual IQueryable<Fun_SplitSTR_Result> Fun_SplitSTR(string s, string split)
        {
            var sParameter = s != null ?
                new ObjectParameter("s", s) :
                new ObjectParameter("s", typeof(string));
    
            var splitParameter = split != null ?
                new ObjectParameter("split", split) :
                new ObjectParameter("split", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_SplitSTR_Result>("[MetaDataEntities].[Fun_SplitSTR](@s, @split)", sParameter, splitParameter);
        }
    
        public virtual int proc_Create_ListRelationship(string tbName)
        {
            var tbNameParameter = tbName != null ?
                new ObjectParameter("tbName", tbName) :
                new ObjectParameter("tbName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Create_ListRelationship", tbNameParameter);
        }
    
        public virtual int proc_Create_ListTable(string tbName)
        {
            var tbNameParameter = tbName != null ?
                new ObjectParameter("tbName", tbName) :
                new ObjectParameter("tbName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Create_ListTable", tbNameParameter);
        }
    
        public virtual int proc_Create_MeshTable(string tbName)
        {
            var tbNameParameter = tbName != null ?
                new ObjectParameter("tbName", tbName) :
                new ObjectParameter("tbName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Create_MeshTable", tbNameParameter);
        }
    
        public virtual int proc_Create_TreeTable(string tbName)
        {
            var tbNameParameter = tbName != null ?
                new ObjectParameter("tbName", tbName) :
                new ObjectParameter("tbName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Create_TreeTable", tbNameParameter);
        }
    
        public virtual ObjectResult<proc_Insert_List_Result> proc_Insert_List(string tbName, string codeName, Nullable<int> seq, string description, Nullable<int> limited, ObjectParameter countName, ObjectParameter countSeq)
        {
            var tbNameParameter = tbName != null ?
                new ObjectParameter("tbName", tbName) :
                new ObjectParameter("tbName", typeof(string));
    
            var codeNameParameter = codeName != null ?
                new ObjectParameter("CodeName", codeName) :
                new ObjectParameter("CodeName", typeof(string));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("Seq", seq) :
                new ObjectParameter("Seq", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var limitedParameter = limited.HasValue ?
                new ObjectParameter("Limited", limited) :
                new ObjectParameter("Limited", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Insert_List_Result>("proc_Insert_List", tbNameParameter, codeNameParameter, seqParameter, descriptionParameter, limitedParameter, countName, countSeq);
        }
    
        public virtual ObjectResult<proc_Insert_Mesh_Result> proc_Insert_Mesh(string tbName, string codeName, Nullable<int> seq, Nullable<int> parentID, string strID, ObjectParameter countName, ObjectParameter countSeq, ObjectParameter thisID)
        {
            var tbNameParameter = tbName != null ?
                new ObjectParameter("tbName", tbName) :
                new ObjectParameter("tbName", typeof(string));
    
            var codeNameParameter = codeName != null ?
                new ObjectParameter("CodeName", codeName) :
                new ObjectParameter("CodeName", typeof(string));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("Seq", seq) :
                new ObjectParameter("Seq", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var strIDParameter = strID != null ?
                new ObjectParameter("strID", strID) :
                new ObjectParameter("strID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Insert_Mesh_Result>("proc_Insert_Mesh", tbNameParameter, codeNameParameter, seqParameter, parentIDParameter, strIDParameter, countName, countSeq, thisID);
        }
    
        public virtual ObjectResult<proc_Insert_Tree_Result> proc_Insert_Tree(string tbName, string codeName, Nullable<int> seq, Nullable<int> parentID, ObjectParameter countName, ObjectParameter countSeq)
        {
            var tbNameParameter = tbName != null ?
                new ObjectParameter("tbName", tbName) :
                new ObjectParameter("tbName", typeof(string));
    
            var codeNameParameter = codeName != null ?
                new ObjectParameter("CodeName", codeName) :
                new ObjectParameter("CodeName", typeof(string));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("Seq", seq) :
                new ObjectParameter("Seq", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Insert_Tree_Result>("proc_Insert_Tree", tbNameParameter, codeNameParameter, seqParameter, parentIDParameter, countName, countSeq);
        }
    
        public virtual ObjectResult<proc_pageView_Result> proc_pageView(string columns, string tbNames, string whereCondition, string orderColumns, Nullable<int> isOrderByASC, Nullable<int> currentPageIndex, Nullable<int> pageSize, ObjectParameter totalPages, ObjectParameter totalRecords)
        {
            var columnsParameter = columns != null ?
                new ObjectParameter("Columns", columns) :
                new ObjectParameter("Columns", typeof(string));
    
            var tbNamesParameter = tbNames != null ?
                new ObjectParameter("TbNames", tbNames) :
                new ObjectParameter("TbNames", typeof(string));
    
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderColumnsParameter = orderColumns != null ?
                new ObjectParameter("OrderColumns", orderColumns) :
                new ObjectParameter("OrderColumns", typeof(string));
    
            var isOrderByASCParameter = isOrderByASC.HasValue ?
                new ObjectParameter("IsOrderByASC", isOrderByASC) :
                new ObjectParameter("IsOrderByASC", typeof(int));
    
            var currentPageIndexParameter = currentPageIndex.HasValue ?
                new ObjectParameter("CurrentPageIndex", currentPageIndex) :
                new ObjectParameter("CurrentPageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_pageView_Result>("proc_pageView", columnsParameter, tbNamesParameter, whereConditionParameter, orderColumnsParameter, isOrderByASCParameter, currentPageIndexParameter, pageSizeParameter, totalPages, totalRecords);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
